# This is a basic workflow to help you get started with Actions

name: CICD-AWS-Beanstalk
env:
  BUCKET_NAME  : "henadzi-flask-bucket"
  APP_NAME     : "Flask"
  ENV_NAME     : "Flask-env"
  DEPLOY_PACKAGE_NAME : "flask_app_${{ github.sha }}.zip"
  AWS_REGION_NAME     : "eu-west-1"
  
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ci-part:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git clone action
        uses: actions/checkout@v3
        
      - name: Create zip package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Confiure AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region           : ${{ env.AWS_REGION_NAME }}
          
      - name: Copy deploy package to S3
        run:  aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.BUCKET_NAME }}/
        
      - name: Finish CI
        run:  echo "Pipeline CI finish sucsessfully!"
        
  
  cd-part:
  
    runs-on: ubuntu-latest
    needs: [ci-part]
    
    steps:
      - name: Confiure AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region           : ${{ env.AWS_REGION_NAME }}
          
      - name: Create new ElasticBeanstalk App version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.APP_NAME }} \
          --source-bundle S3Bucket="${{ env.BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-lable "Ver_${{ github.sha }}" \
          --description "CommitSHA_${{ github.sha }}"
          
      - name: Deploy new ElasticBeanstalk App version
        run: aws elasticbeanstalk update-enviroment \
             --enviroment-name ${{ env.ENV_NAME }} \
             --version-label "Ver-${{ github.sha }}"
             
      - name: Finish CD
        run:  echo "Pipeline CD finish sucsessfully!"
